% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/genAlgo.R
\name{genAlgo}
\alias{genAlgo}
\title{Start The Genetic Algorithm for a wind Farm Layout}
\usage{
genAlgo(Polygon1, Rotor, n, fcrR, referenceHeight, RotorHeight,
  SurfaceRoughness, Proportionality, iteration, mutr, vdirspe, topograp,
  elitism, nelit, selstate, crossPart1, trimForce, Projection, sourceCCL,
  sourceCCLRoughness)
}
\arguments{
\item{Polygon1}{The considered area as shapefile (SpatialPolygons)}

\item{Rotor}{A numeric value that gives the rotor radius in meter
(numeric)}

\item{n}{A numeric value indicating the required amount of turbines
(numeric)}

\item{fcrR}{A numeric value, that is used for grid spacing (numeric)}

\item{referenceHeight}{The height at which the incoming
wind speeds were measured. (numeric)}

\item{RotorHeight}{The desired height of the turbine.
(numeric)}

\item{SurfaceRoughness}{A surface roughness length of the
considered area in m.  If the terrain effect model is activated, a
surface roughness will be calculated for every grid cell with the
elevation and land cover information. (numeric)}

\item{Proportionality}{A numeric factor used for grid calculation.
Determines the percentage a grid has to overlay (numeric)}

\item{iteration}{A numeric value indicating the desired amount
of iterations of the algorithm (numeric)}

\item{mutr}{A numeric mutation rate, with low default value of 0.008
(numeric)}

\item{vdirspe}{A data.frame containing the incoming wind speeds,
wind directions and probabilities (data.frame)}

\item{topograp}{Logical Value, which indicates if the terrain effect model
should be activated or not. (logical)}

\item{elitism}{Boolean Value, which indicates whether elitism should
be included or not. (logical)}

\item{nelit}{If \code{elitism} is TRUE, then this input variable
determines the amount of individuals in the elite group. (numeric)}

\item{selstate}{Determines which selection method is used,
"FIX" selects a constant percentage and "VAR" selects a variable percentage,
depending on the development of the fitness values. (character)}

\item{crossPart1}{Determines which crossover method is used,
"EQU" divides the genetic code at equal intervals and
"RAN" divides the genetic code at random locations. (character)}

\item{trimForce}{If activated (\code{trimForce}==TRUE),
the algorithm will take a probabilistic approach to trim the windfarms
to the desired amount of turbines. If deactivated
(\code{trimForce}==FALSE) the adjustment will be random.
(logical)}

\item{Projection}{A desired Projection can be used instead
of the default Lambert Azimuthal Equal Area Projection. (character)}

\item{sourceCCL}{The source to the Corine Land Cover raster (.tif). Only
required, when the terrain effect model is activated. (character)}

\item{sourceCCLRoughness}{The source to the adapted
Corine Land Cover legend as .csv file. Only required, when terrain
effect model is activated. As default a .csv file within this
package (\file{~/extdata}) is taken that was already adapted
manually. To use your own .csv legend this variable has to be assigned.
See Details. (character)}
}
\value{
The result of this run is a matrix of all relevant output
parameters. This output can be used for several plotting functions.
(matrix)
}
\description{
This function coordinates all other elements of the
genetic algorithm. To initiate an optimization run, this method has to
be called with the desired inputs. To be able to include the terrain effect
model, the source of the Corine Land cover raster has to be given.
This function will not control user inputs before an optimization process.
It is therefore recommended to start an optimization run with
the \code{\link{windfarmGA}} function.
}
\examples{
\donttest{
## Create a random rectangular shapefile
library(sp)
Polygon1 <- Polygon(rbind(c(0, 0), c(0, 2000), c(2000, 2000), c(2000, 0)))
Polygon1 <- Polygons(list(Polygon1),1);
Polygon1 <- SpatialPolygons(list(Polygon1))
Projection <- "+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000
+ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
proj4string(Polygon1) <- CRS(Projection)
plot(Polygon1,axes=TRUE)

## Create a uniform and unidirectional wind data.frame and plots the
## resulting wind rose
## Uniform wind speed and single wind direction
data.in <- as.data.frame(cbind(ws=12,wd=0))
# windrosePlot <- plotWindrose(data = data.in, spd = data.in$ws,
#                dir = data.in$wd, dirres=10, spdmax=20)

## Runs an optimization run for 10 iterations (iteration) with the
## given shapefile (Polygon1), the wind data.frame (data.in),
## 12 turbines (n) with rotor radii of 30m (Rotor) and a grid spacing
## factor of 3 (fcrR) and other required inputs.
result <- genAlgo(Polygon1 = Polygon1, n=12, Rotor=20,fcrR=3,iteration=10,
             vdirspe = data.in,crossPart1 = "EQU",selstate="FIX",mutr=0.8,
            Proportionality = 1, SurfaceRoughness = 0.3, topograp = FALSE,
            elitism=TRUE, nelit = 7, trimForce = TRUE,
            referenceHeight = 50,RotorHeight = 100)
}
}
\author{
Sebastian Gatscha
}
